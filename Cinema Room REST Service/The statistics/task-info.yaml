type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/repository/RoomRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.entity.Room;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface RoomRepository extends CrudRepository<Room, Long> {}
  learner_created: true
- name: src/cinema/handler/RestExceptionHandler.java
  visible: true
  text: |
    package cinema.handler;

    import cinema.exceptions.*;
    import org.springframework.core.Ordered;
    import org.springframework.core.annotation.Order;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @Order(Ordered.HIGHEST_PRECEDENCE)
    @ControllerAdvice
    public class RestExceptionHandler {

        @ExceptionHandler(InvalidPostRequest.class)
        protected ResponseEntity<ErrorResponse> handlerCustomAppException(InvalidPostRequest ex) {
            ErrorResponse errorResponse = new ErrorResponse(ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(InvalidRowColumnException.class)
        protected ResponseEntity<ErrorResponse> handlerCustomAppException(InvalidRowColumnException ex) {
            ErrorResponse errorResponse = new ErrorResponse(ex.getMessage());
             return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(TicketAlreadyPurchasedException.class)
        protected ResponseEntity<ErrorResponse> handlerCustomAppException(TicketAlreadyPurchasedException ex) {
            ErrorResponse errorResponse = new ErrorResponse(ex.getMessage());
             return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(TickerNotFoundException.class)
        protected ResponseEntity<ErrorResponse> handlerCustomAppException(TickerNotFoundException ex) {
            ErrorResponse errorResponse = new ErrorResponse(ex.getMessage());
             return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(WrongTokenException.class)
        protected ResponseEntity<ErrorResponse> handlerCustomAppException(WrongTokenException ex) {
            ErrorResponse errorResponse = new ErrorResponse(ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/repository/PurchasedTicketRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.entity.PurchasedTicket;
    import org.springframework.data.repository.CrudRepository;

    import java.util.UUID;

    public interface PurchasedTicketRepository extends CrudRepository<PurchasedTicket, UUID> {}
  learner_created: true
- name: src/cinema/exceptions/WrongTokenException.java
  visible: true
  text: |-
    package cinema.exceptions;

    public class WrongTokenException extends RuntimeException{
        private static final String CAUSE = "Wrong token!";

        public WrongTokenException() {super(CAUSE);}
    }
  learner_created: true
- name: src/cinema/handler/ErrorResponse.java
  visible: true
  text: |
    package cinema.handler;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Getter;

    @Getter
    @AllArgsConstructor
    public class ErrorResponse {
        @JsonProperty("error")
        private String message;
    }
  learner_created: true
- name: src/cinema/entity/Token.java
  visible: true
  text: |
    package cinema.entity;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import java.util.UUID;

    @AllArgsConstructor
    @NoArgsConstructor
    @Getter
    @Setter
    public class Token {
        private UUID token;
    }
  learner_created: true
- name: src/cinema/exceptions/InvalidRowColumnException.java
  visible: true
  text: |
    package cinema.exceptions;



    public class InvalidRowColumnException extends RuntimeException{
        private static final String CAUSE = "The number of a row or a column is out of bounds!";

        public InvalidRowColumnException() {super(CAUSE);}
    }
  learner_created: true
- name: src/cinema/exceptions/TickerNotFoundException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class TickerNotFoundException extends RuntimeException{
        private static final String CAUSE = "Ticket does not exists";
        public TickerNotFoundException() {super(CAUSE);}
    }
  learner_created: true
- name: src/cinema/entity/PurchasedTicket.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;
    import org.hibernate.annotations.Type;

    import javax.persistence.*;
    import java.util.UUID;

    @Entity
    @Table
    @NoArgsConstructor
    @AllArgsConstructor
    @Getter
    @Setter
    public class PurchasedTicket {

        @GeneratedValue
        @Type(type = "org.hibernate.type.UUIDCharType")
        @Id
        @Column(length = 36, unique = true, nullable = false)
        @JsonSerialize(using = ToStringSerializer.class)
        private UUID token;

        @JsonProperty("ticket")
        @OneToOne
        @JoinColumn(name = "id", nullable = false)
        private Ticket ticket_details;

        public PurchasedTicket(Ticket ticket_details) {
            this.ticket_details = ticket_details;
        }
    }
  learner_created: true
- name: src/cinema/entity/Ticket.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import javax.persistence.*;

    @JsonPropertyOrder({"row", "column", "price"})
    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    @Entity
    @Table
    public class Ticket {
        @JsonIgnore
        @Id
        @SequenceGenerator(
                name = "ticket_sequence",
                sequenceName = "ticket_sequence",
                allocationSize = 1
        )
        @GeneratedValue(
                strategy = GenerationType.SEQUENCE,
                generator = "ticket_sequence"
        )
        private Long id;
        private Integer row;

        @JsonProperty("column")
        private Integer col;
        private Integer price;
        @JsonIgnore
        private boolean isAvailable;
        @JsonIgnore
        @ManyToOne
        @JoinColumn(name = "room_id")
        private Room room;


        public Ticket(Integer row, Integer col, Integer price, boolean isAvailable, Room room) {
            this.row = row;
            this.col = col;
            this.price = price;
            this.isAvailable = isAvailable;
            this.room = room;
        }
    }
  learner_created: true
- name: src/cinema/entity/ReturnedTicket.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class ReturnedTicket {
        @JsonProperty("returned_ticket")
        Ticket ticket;
    }
  learner_created: true
- name: src/cinema/exceptions/InvalidPostRequest.java
  visible: true
  text: |
    package cinema.exceptions;

    public class InvalidPostRequest extends RuntimeException{
        private static final String CAUSE = "Missing parameters in post request";

        public InvalidPostRequest() {super(CAUSE);}
    }
  learner_created: true
- name: src/cinema/exceptions/TicketAlreadyPurchasedException.java
  visible: true
  text: |
    package cinema.exceptions;



    public class TicketAlreadyPurchasedException extends RuntimeException{

        private static final String CAUSE = "The ticket has been already purchased!";
        public TicketAlreadyPurchasedException() {super(CAUSE);}
    }
  learner_created: true
- name: src/cinema/util/RoomConfig.java
  visible: true
  text: |
    package cinema.util;

    import cinema.entity.Room;
    import cinema.entity.Ticket;
    import cinema.repository.RoomRepository;
    import cinema.repository.TicketRepository;
    import org.springframework.boot.CommandLineRunner;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    public class RoomConfig {
        @Bean
        CommandLineRunner commandLineRunner(RoomRepository roomRepository, TicketRepository ticketRepository) {
            return args -> {
                Room room = new Room(9, 9);
                roomRepository.save(room);

                for (int i = 1; i <= 9; i++) {
                    for (int j = 1; j <= 9; j++) {
                        Ticket ticket = new Ticket(i, j,10 , true, new Room(1L));
                        ticketRepository.save(ticket);
                    }
                }
            };
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.entity.*;
    import cinema.exceptions.InvalidPostRequest;
    import cinema.exceptions.WrongTokenException;
    import cinema.service.CinemaService;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;


    @RestController
    public class CinemaController {

        private final CinemaService cinemaService;

        @Autowired
        public CinemaController(CinemaService cinemaService) {this.cinemaService = cinemaService;}

        @GetMapping("/seats")
        public Room getRoom() {
            return cinemaService.findRoomById(1L);
        }

        @PostMapping("/purchase")
        public ResponseEntity<String> purchaseTicket(@RequestBody Ticket ticket ) throws JsonProcessingException {
            // missing parameter in post request
            if (ticket.getRow() == null || ticket.getCol() == null) throw new InvalidPostRequest();

            PurchasedTicket purchasedTicket = cinemaService.purchaseTicket(ticket);
            ObjectMapper objectMapper = new ObjectMapper();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type", "application/json");
            String body = objectMapper.writeValueAsString(purchasedTicket);
            return ResponseEntity.ok().headers(responseHeaders).body(body);
        }

        @PostMapping("/return")
        public ResponseEntity<String> returnTicket(@RequestBody Token token ) throws JsonProcessingException {
            // missing parameter in post request
            if (token == null) throw new WrongTokenException();

            ReturnedTicket returnedTicket = cinemaService.returnTicket(token.getToken());

            ObjectMapper objectMapper = new ObjectMapper();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Content-Type", "application/json");
            String body = objectMapper.writeValueAsString(returnedTicket);
            return ResponseEntity.ok().headers(responseHeaders).body(body);
        }
    }
  learner_created: true
- name: src/cinema/entity/Room.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import javax.persistence.*;
    import java.util.ArrayList;
    import java.util.List;

    @JsonPropertyOrder({"total_rows", "total_columns", "available_seats"})
    @AllArgsConstructor
    @NoArgsConstructor
    @Getter
    @Setter
    @Entity
    @Table(name = "rooms")
    public class Room {
        @Id
        @JsonIgnore
        @SequenceGenerator(
                name = "room_sequence",
                sequenceName = "room_sequence",
                allocationSize = 1
        )
        @GeneratedValue(
                strategy = GenerationType.SEQUENCE,
                generator = "room_sequence"
        )
        private Long id;
        @JsonProperty("total_rows")
        Integer totalRows;
        @JsonProperty("total_columns")
        Integer totalColumns;

        @JsonProperty("available_seats")
        @OneToMany(mappedBy = "room")
        private List<Ticket> tickets = new ArrayList<>();

        public Room(Long id) {
            this.id = id;
        }

        public Room(Integer totalRows, Integer totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.entity.*;
    import cinema.exceptions.InvalidRowColumnException;
    import cinema.exceptions.TickerNotFoundException;
    import cinema.exceptions.TicketAlreadyPurchasedException;
    import cinema.exceptions.WrongTokenException;
    import cinema.repository.PurchasedTicketRepository;
    import cinema.repository.RoomRepository;
    import cinema.repository.TicketRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.io.PushbackInputStream;
    import java.util.List;
    import java.util.Optional;
    import java.util.UUID;

    @Service
    public class CinemaService {

        private final RoomRepository roomRepository;
        private final TicketRepository ticketRepository;
        private final PurchasedTicketRepository purchasedTicketRepository;

        @Autowired
        public CinemaService(RoomRepository roomRepository, TicketRepository ticketRepository, PurchasedTicketRepository purchasedTicketRepository) {
            this.roomRepository = roomRepository;
            this.ticketRepository = ticketRepository;
            this.purchasedTicketRepository = purchasedTicketRepository;
        }


        public PurchasedTicket purchaseTicket(Ticket ticket) {

            Room room = findRoomById(1L);
            // invalid rows or columns
            if (isInvalidColsOrRows(room, ticket)) throw new InvalidRowColumnException();

            Integer row = ticket.getRow();
            Integer col = ticket.getCol();
            Long roomId = room.getId();
            Optional<Ticket> ticketOpt = ticketRepository.findTicketByRowColAndRoomId(row, col, roomId);

            // ticket is not found
            if (ticketOpt.isEmpty()) throw new InvalidRowColumnException();

            if (!ticketOpt.get().isAvailable()) throw new TicketAlreadyPurchasedException();
            ticketOpt.get().setAvailable(false);
            ticketRepository.save(ticketOpt.get());
            // create token
            return purchasedTicketRepository.save(new PurchasedTicket(ticketOpt.get()));
        }
        public Room findRoomById(long id) {
            Optional<Room> roomOpt =  roomRepository.findById(id);
            if (roomOpt.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Room with id " + id + " does not exists");
            }
            Room room = roomOpt.get();
            room.setTickets(filterAvailableSeats(room));
            return roomOpt.get();
        }

        public boolean isInvalidColsOrRows(Room room, Ticket ticket) {
            return room.getTotalColumns() < ticket.getCol() || room.getTotalRows() < ticket.getRow();
        }

        public List<Ticket> filterAvailableSeats(Room room) {
            return room.getTickets().stream().filter(Ticket::isAvailable).toList();
        }

        public ReturnedTicket returnTicket(UUID token) {
           Optional<PurchasedTicket> purchasedTicketOpt = purchasedTicketRepository.findById(token);

            if (purchasedTicketOpt.isEmpty()) throw new WrongTokenException();

            PurchasedTicket purchasedTicket = purchasedTicketOpt.get();

            Optional<Ticket> ticketOpt = ticketRepository.findById(purchasedTicket.getTicket_details().getId());
            if (ticketOpt.isEmpty()) throw new WrongTokenException();
            Ticket ticket = ticketOpt.get();
            ticket.setAvailable(true);
            ticketRepository.save(ticket);

            return new ReturnedTicket(ticket);
        }
    }
  learner_created: true
- name: src/cinema/repository/TicketRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.entity.Ticket;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.data.repository.query.Param;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface TicketRepository extends CrudRepository<Ticket, Long> {
        @Query("SELECT t FROM Ticket t WHERE t.row = :row AND t.col = :col AND t.room.id = :room_id")
        Optional<Ticket> findTicketByRowColAndRoomId(@Param("row") Integer row, @Param("col") Integer column, @Param("room_id") Long roomId);
    }
  learner_created: true
- name: src/cinema/exceptions/WrongPasswordException.java
  visible: true
  learner_created: true
- name: src/cinema/entity/Stats.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Tue, 14 Feb 2023 17:39:53 UTC"
record: -1
