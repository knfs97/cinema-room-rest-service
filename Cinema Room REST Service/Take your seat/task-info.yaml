type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/exceptions/TicketAlreadyPurchasedException.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/InvalidRowColumnException.java
  visible: true
  learner_created: true
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: "package cinema.controller;\n\nimport cinema.entity.Room;\nimport cinema.service.RoomService;\n\
    import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\n\
    import org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\
    \n@RestController\npublic class RoomController {\n\n    private final RoomService\
    \ roomService;\n\n    @Autowired\n    public RoomController(RoomService roomService)\
    \ {this.roomService = roomService;}\n\n    @GetMapping(\"/seats\")\n    public\
    \ Room getRoom() {\n        return roomService.findRoomById(1L);\n    }\n    \n\
    \    @PostMapping(\"/purchase\")\n    public Roo\n}\n"
  learner_created: true
- name: src/cinema/exceptions/InvalidPostRequest.java
  visible: true
  learner_created: true
- name: src/cinema/repository/RoomRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.entity.Room;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface RoomRepository extends CrudRepository<Room, Long> {}
  learner_created: true
- name: src/cinema/util/RoomConfig.java
  visible: true
  text: |
    package cinema.util;

    import cinema.entity.Room;
    import cinema.repository.RoomRepository;
    import org.springframework.boot.CommandLineRunner;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    public class RoomConfig {
        @Bean
        CommandLineRunner commandLineRunner(RoomRepository roomRepository) {
            return args -> {
                Room room = new Room(9, 9);
                roomRepository.save(room);
            };
        }
    }
  learner_created: true
- name: src/cinema/entity/Room.java
  visible: true
  text: |
    package cinema.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import jdk.jfr.Enabled;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import javax.persistence.*;
    import java.util.ArrayList;
    import java.util.List;

    @AllArgsConstructor
    @Getter
    @Setter
    @Entity
    @Table(name = "cinema")
    public class Room {
        @Id
        @JsonIgnore
        @SequenceGenerator(
                name = "room_sequence",
                sequenceName = "room_sequence",
                allocationSize = 1
        )
        @GeneratedValue(
                strategy = GenerationType.SEQUENCE,
                generator = "room_sequence"
        )
        private Long id;
        @JsonProperty("total_rows")
        Integer totalRows;
        @JsonProperty("total_columns")
        Integer totalColumns;

        @Transient
        @JsonProperty("available_seats")
        private List<Seat> distribution;

        public Room() {this.distribution = new ArrayList<>();}

        public Room(Integer totalRows, Integer totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.distribution = new ArrayList<>();
        }

        public void initDistribution() {
           try {
               for (int i = 1; i <= this.totalRows; i++) {
                   for (int j = 1; j <= this.totalRows; j++) {
                        this.distribution.add(new Seat(i, j));
                   }
               }
           } catch (Exception e) {
               System.out.println(e.getMessage());
           }
        }




    }
  learner_created: true
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: src/cinema/entity/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/handler/RestExceptionHandler.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/TickerNotFoundException.java
  visible: true
  learner_created: true
- name: src/cinema/handler/ErrorResponse.java
  visible: true
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.entity.Room;
    import cinema.repository.RoomRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Optional;

    @Service
    public class RoomService {

        private final RoomRepository roomRepository;

        @Autowired
        public RoomService(RoomRepository roomRepository) {this.roomRepository = roomRepository;}

        public Room findRoomById(long id) {
            Optional<Room> roomOpt =  roomRepository.findById(id);
            if (roomOpt.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Room with id " + id + " does not exists");
            }
            Room room = roomOpt.get();
            room.initDistribution();
            return room;
        }
    }
  learner_created: true
- name: src/cinema/repository/TicketRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13376#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 13 Feb 2023 23:36:12 UTC"
record: 2
